[{"/home/munhoz/dev/react/gs3-tec-front/src/pages/cadastro-usuario/index.tsx":"1","/home/munhoz/dev/react/gs3-tec-front/src/index.tsx":"2","/home/munhoz/dev/react/gs3-tec-front/src/pages/auth/index.tsx":"3","/home/munhoz/dev/react/gs3-tec-front/src/reportWebVitals.ts":"4","/home/munhoz/dev/react/gs3-tec-front/src/core/Routing.tsx":"5","/home/munhoz/dev/react/gs3-tec-front/src/validations/form-validators.tsx":"6","/home/munhoz/dev/react/gs3-tec-front/src/components/sanckbar/index.tsx":"7","/home/munhoz/dev/react/gs3-tec-front/src/services/loginService.tsx":"8","/home/munhoz/dev/react/gs3-tec-front/src/store/loadingStore.tsx":"9","/home/munhoz/dev/react/gs3-tec-front/src/components/chips/index.tsx":"10","/home/munhoz/dev/react/gs3-tec-front/src/services/viaCepService.tsx":"11","/home/munhoz/dev/react/gs3-tec-front/src/validations/masks.tsx":"12","/home/munhoz/dev/react/gs3-tec-front/src/services/cadastroService.tsx":"13","/home/munhoz/dev/react/gs3-tec-front/src/store/storeAuth.tsx":"14"},{"size":14543,"mtime":1608164094910,"results":"15","hashOfConfig":"16"},{"size":916,"mtime":1608135119760,"results":"17","hashOfConfig":"16"},{"size":4389,"mtime":1608133542580,"results":"18","hashOfConfig":"16"},{"size":425,"mtime":1607954709530,"results":"19","hashOfConfig":"16"},{"size":471,"mtime":1607959401280,"results":"20","hashOfConfig":"16"},{"size":2616,"mtime":1608064316590,"results":"21","hashOfConfig":"16"},{"size":1738,"mtime":1607981348560,"results":"22","hashOfConfig":"16"},{"size":441,"mtime":1608163817740,"results":"23","hashOfConfig":"16"},{"size":260,"mtime":1607990622180,"results":"24","hashOfConfig":"16"},{"size":3842,"mtime":1608057004760,"results":"25","hashOfConfig":"16"},{"size":493,"mtime":1608063496460,"results":"26","hashOfConfig":"16"},{"size":902,"mtime":1608057065210,"results":"27","hashOfConfig":"16"},{"size":817,"mtime":1608164090050,"results":"28","hashOfConfig":"16"},{"size":307,"mtime":1608135384880,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"13xt3q1",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/munhoz/dev/react/gs3-tec-front/src/pages/cadastro-usuario/index.tsx",["60"],"import { Button, Container, Grid, Paper, TextField } from \"@material-ui/core\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport ChipsArray from \"../../components/chips\";\nimport { CustomSnackbar, CustomSnackbarRef } from \"../../components/sanckbar\";\nimport { CadastroUsuarioModel } from \"../../core/models/cadastro-usuario/cadastroUsuarioModel\";\nimport { FieldForm, FieldFormArray } from \"../../core/models/forms\";\nimport { CadastroService } from \"../../services/cadastroService\";\nimport { ViaCepService } from \"../../services/viaCepService\";\nimport { AuthStore } from \"../../store/storeAuth\";\nimport { FormValidators } from \"../../validations/form-validators\";\nimport { Masks } from \"../../validations/masks\";\n\nexport default function CadastroUsuario() {\n  var history = useHistory();\n  const refSnackBar = useRef<CustomSnackbarRef>();\n  const [form, setForm] = useState<CadastroUsuarioModel>({\n    formSubmited: false,\n    nome: { msgError: FormValidators.msgNotEmpty } as FieldForm,\n    cpf: { msgError: FormValidators.msgNotEmpty } as FieldForm,\n    endereco: {\n      complemento: { msgError: FormValidators.msgNotEmpty } as FieldForm,\n      bairro: { msgError: FormValidators.msgNotEmpty } as FieldForm,\n      uf: { msgError: FormValidators.msgNotEmpty } as FieldForm,\n      cidade: { msgError: FormValidators.msgNotEmpty } as FieldForm,\n      cep: { msgError: FormValidators.msgNotEmpty } as FieldForm,\n      logradouro: { msgError: FormValidators.msgNotEmpty } as FieldForm,\n    },\n    telefone: { msgError: \"\" } as FieldFormArray,\n    email: { msgError: \"\" } as FieldFormArray,\n  });\n\n  useEffect(() => {\n    if(AuthStore.getToken() === \"\") {\n      history.goBack()\n    }\n  }, []);\n\n\n  const formValidade = async (submit: any) => {\n    submit.preventDefault();\n\n    setForm((prev) => {\n      return {\n        ...prev,\n        formSubmited: true,\n      };\n    });\n\n    const { cpf, telefone, email, endereco, nome } = form;\n\n    if (\n      FormValidators.isInvalid(\n        [\n          cpf,\n          nome,\n          endereco.bairro,\n          endereco.cidade,\n          endereco.cep,\n          endereco.uf,\n        ],\n        [email, telefone]\n      )\n    ) {\n      return;\n    }\n\n    try {\n      const formToSent = prepararJson();\n\n      refSnackBar.current?.onClick({\n        message: \"Cadastrado\",\n        error: false,\n      });\n      await CadastroService.post(formToSent);\n    } catch (error) {\n      refSnackBar.current?.onClick({\n        message: \"Erro ao tentar acessar o serviço\",\n        error: true,\n      });\n    }\n  };\n\n  const setEnedereco = (\n    value: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    const cepSemMask = value.target.value.replace(/[-.]/g, \"\");\n    if (cepSemMask.length === 8) {\n      ViaCepService.get(cepSemMask).then((value) =>\n        setForm({\n          ...form,\n          endereco: {\n            bairro: { value: value.bairro, msgError: \"\" },\n            cidade: { value: value.localidade, msgError: \"\" },\n            logradouro: { value: value.logradouro, msgError: \"\" },\n            uf: { value: value.uf, msgError: \"\" },\n            complemento: { value: value.complemento, msgError: \"\" },\n            cep: { value: Masks.cep(value.cep), msgError: \"\" },\n          },\n        })\n      );\n    } else {\n      setForm({\n        ...form,\n        endereco: {\n          ...form.endereco,\n          cep: { value: Masks.cep(value.target.value), msgError: \"\" },\n        },\n      });\n    }\n  };\n\n  return (\n    <form onSubmitCapture={formValidade} noValidate autoComplete=\"off\">\n      <Container maxWidth=\"md\">\n        <Paper elevation={3}>\n          <Grid\n            className=\"auth-container\"\n            container\n            xs={12}\n            justify=\"space-around\"\n          >\n            <Grid container xs={12}></Grid>\n\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"space-evenly\"\n              spacing={2}\n              xs={10}\n            >\n              <Grid xs={6} item={true}>\n                <TextField\n                  required\n                  fullWidth\n                  id=\"filled-basic\"\n                  label=\"Nome\"\n                  variant=\"outlined\"\n                  helperText={form.formSubmited && form.nome.msgError}\n                  error={form.formSubmited && !!form.nome.msgError}\n                  onChange={(value) => {\n                    setForm((_) => ({\n                      ...form,\n                      nome: {\n                        value: value.target.value,\n                        msgError: nomeValidation(value),\n                      },\n                    }));\n                  }}\n                />\n              </Grid>\n\n              <Grid xs={6} item={true}>\n                <TextField\n                  required\n                  fullWidth\n                  id=\"filled-basic\"\n                  label=\"CPF\"\n                  variant=\"outlined\"\n                  helperText={form.formSubmited && form.cpf.msgError}\n                  error={form.formSubmited && !!form.cpf.msgError}\n                  onChange={(value) => {\n                    setForm((_) => ({\n                      ...form,\n                      cpf: {\n                        value: Masks.cpf(value.target.value),\n                        msgError: cpfValidation(value),\n                      },\n                    }));\n                  }}\n                  value={form.cpf.value || \"\"}\n                />\n              </Grid>\n\n              <Grid container xs={12} spacing={1} item={true}>\n                <Grid xs={3} item={true}>\n                  <TextField\n                    required\n                    fullWidth\n                    id=\"filled-basic\"\n                    label=\"Endereço\"\n                    variant=\"outlined\"\n                    helperText={form.formSubmited && form.endereco.cep.msgError}\n                    error={!!form.endereco.cep.msgError && form.formSubmited}\n                    onChange={(value) => {\n                      setEnedereco(value);\n                    }}\n                    value={form.endereco.cep.value || \"\"}\n                  />\n                </Grid>\n                <Grid xs={3} item={true}>\n                  <TextField\n                    required\n                    fullWidth\n                    id=\"filled-basic\"\n                    label=\"Logradouro\"\n                    variant=\"outlined\"\n                    helperText={\n                      form.formSubmited && form.endereco.logradouro.msgError\n                    }\n                    error={\n                      !!form.endereco.logradouro.msgError && form.formSubmited\n                    }\n                    onChange={(value) => {\n                      setForm(({ endereco }) => ({\n                        ...form,\n                        endereco: {\n                          ...endereco,\n                          logradouro: {\n                            value: value.target.value,\n                            msgError: FormValidators.invalidField(\n                              value.target.value\n                            ),\n                          },\n                        },\n                      }));\n                    }}\n                    value={form.endereco.logradouro.value || \"\"}\n                  />\n                </Grid>\n\n                <Grid xs={3} item={true}>\n                  <TextField\n                    required\n                    fullWidth\n                    id=\"filled-basic\"\n                    label=\"Bairro\"\n                    variant=\"outlined\"\n                    helperText={\n                      form.formSubmited && form.endereco.bairro.msgError\n                    }\n                    error={!!form.endereco.bairro.msgError && form.formSubmited}\n                    value={form.endereco.bairro.value || \"\"}\n                    onChange={(value) => {\n                      setForm(({ endereco }) => ({\n                        ...form,\n                        endereco: {\n                          ...endereco,\n                          bairro: {\n                            value: value.target.value,\n                            msgError: FormValidators.invalidField(\n                              value.target.value\n                            ),\n                          },\n                        },\n                      }));\n                    }}\n                  />\n                </Grid>\n\n                <Grid xs={2} item={true}>\n                  <TextField\n                    required\n                    fullWidth\n                    id=\"filled-basic\"\n                    label=\"Cidade\"\n                    variant=\"outlined\"\n                    helperText={\n                      form.formSubmited && form.endereco.cidade.msgError\n                    }\n                    error={!!form.endereco.cidade.msgError && form.formSubmited}\n                    value={form.endereco.cidade.value || \"\"}\n                    onChange={(value) => {\n                      setForm(({ endereco }) => ({\n                        ...form,\n                        endereco: {\n                          ...endereco,\n                          cidade: {\n                            value: value.target.value,\n                            msgError: FormValidators.invalidField(\n                              value.target.value\n                            ),\n                          },\n                        },\n                      }));\n                    }}\n                  />\n                </Grid>\n\n                <Grid xs={1} item={true}>\n                  <TextField\n                    required\n                    fullWidth\n                    id=\"filled-basic\"\n                    label=\"UF\"\n                    variant=\"outlined\"\n                    helperText={form.formSubmited && form.endereco.uf.msgError}\n                    error={!!form.endereco.uf.msgError && form.formSubmited}\n                    value={form.endereco.uf.value || \"\"}\n                    onChange={(value) => {\n                      setForm(({ endereco }) => ({\n                        ...form,\n                        endereco: {\n                          ...endereco,\n                          uf: {\n                            value: value.target.value,\n                            msgError: FormValidators.invalidField(\n                              value.target.value\n                            ),\n                          },\n                        },\n                      }));\n                    }}\n                  />\n                </Grid>\n              </Grid>\n\n              <Grid xs={12} item={true}>\n                <TextField\n                  required\n                  fullWidth\n                  id=\"filled-basic\"\n                  label=\"Complemento\"\n                  variant=\"outlined\"\n                  onChange={(value) => {\n                    setForm(({ endereco }) => ({\n                      ...form,\n                      endereco: {\n                        ...endereco,\n                        complemento: {\n                          value: value.target.value,\n                          msgError: \"\",\n                        },\n                      },\n                    }));\n                  }}\n                />\n              </Grid>\n\n              <Grid container xs={6} justify=\"space-around\" direction=\"row\">\n                <ChipsArray\n                  label=\"Números\"\n                  add={(list) => {\n                    listValidation(list, \"Telefone\", \"telefone\");\n                  }}\n                  listSelect={[\n                    { text: \"📱\", mask: Masks.celular },\n                    { text: \"🏦\", mask: Masks.telFixo },\n                    { text: \"🏠\", mask: Masks.telFixo },\n                  ]}\n                ></ChipsArray>\n              </Grid>\n\n              <Grid container xs={6} justify=\"space-around\" direction=\"row\">\n                <ChipsArray\n                  label=\"Email\"\n                  add={(list) => {\n                    listValidation(list, \"E-mail\", \"email\");\n                  }}\n                ></ChipsArray>\n              </Grid>\n            </Grid>\n\n            <Grid container xs={12}></Grid>\n\n            <Grid container direction=\"row\" justify=\"space-between\" xs={11}>\n              <Grid item={true} xs={5}>\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"\n                >\n                  Cadastrar\n                </Button>\n              </Grid>\n\n              <Grid item={true} xs={5}>\n                <Button\n                  onClick={history.goBack}\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  Voltar\n                </Button>\n              </Grid>\n            </Grid>\n            <CustomSnackbar ref={refSnackBar} />\n          </Grid>\n        </Paper>\n      </Container>\n    </form>\n  );\n\n  function prepararJson() {\n    const formToSent = FormValidators.cadastroUsuarioToHTPP(form);\n    formToSent.cpf = FormValidators.justNumbers(formToSent.cpf);\n    formToSent.endereco.cep = FormValidators.justNumbers(\n      formToSent.endereco.cep\n    );\n    formToSent.telefone = formToSent.telefone.map(FormValidators.justNumbers);\n    return formToSent;\n  }\n\n  function listValidation(\n    list: any[],\n    nomeDoElemento: string,\n    fieldName: string\n  ) {\n    if (list && list.length === 0) {\n      setForm((_) => ({\n        ...form,\n        [fieldName]: {\n          value: list.map((item) => item.text),\n          msgError: FormValidators.setMsgSelect(nomeDoElemento),\n        },\n      }));\n    } else {\n      setForm((_) => ({\n        ...form,\n        [fieldName]: {\n          value: list.map((item) => item.text),\n          msgError: \"\",\n        },\n      }));\n    }\n  }\n\n  function nomeValidation(\n    value: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ): string | null | undefined {\n    return [\n      FormValidators.invalidField(value.target.value),\n      FormValidators.invalidLengthdMin(value.target.value, 3),\n      FormValidators.invalidLengthMax(value.target.value, 100),\n    ].find((res) => !!res);\n  }\n\n  function cpfValidation(\n    value: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ): string | null | undefined {\n    return [FormValidators.invalidField(value.target.value)].find(\n      (res) => !!res\n    );\n  }\n}\n","/home/munhoz/dev/react/gs3-tec-front/src/index.tsx",[],"/home/munhoz/dev/react/gs3-tec-front/src/pages/auth/index.tsx",[],"/home/munhoz/dev/react/gs3-tec-front/src/reportWebVitals.ts",[],"/home/munhoz/dev/react/gs3-tec-front/src/core/Routing.tsx",[],"/home/munhoz/dev/react/gs3-tec-front/src/validations/form-validators.tsx",[],"/home/munhoz/dev/react/gs3-tec-front/src/components/sanckbar/index.tsx",[],"/home/munhoz/dev/react/gs3-tec-front/src/services/loginService.tsx",[],"/home/munhoz/dev/react/gs3-tec-front/src/store/loadingStore.tsx",[],"/home/munhoz/dev/react/gs3-tec-front/src/components/chips/index.tsx",["61"],"import {\n    Grid,\n    IconButton,\n    InputBase,\n    MenuItem,\n    Select\n} from \"@material-ui/core\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ResetIcon from \"@material-ui/icons/Clear\";\nimport React, { useEffect, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { FormValidators } from \"../../validations/form-validators\";\n\ninterface ChipData {\n  key: string;\n  text: string;\n}\ninterface MaskFormatSelect {\n  text: string;\n  mask?(value: string): string;\n}\ninterface ChipDataProps {\n  add(list: ChipData[]): void;\n  label: string;\n  listSelect?: MaskFormatSelect[];\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      flexWrap: \"wrap\",\n      listStyle: \"none\",\n      padding: theme.spacing(0.5),\n      margin: 0,\n    },\n    chip: {\n      margin: theme.spacing(0.5),\n    },\n  })\n);\n\nexport default function ChipsArray({ add, label, listSelect }: ChipDataProps) {\n  const classes = useStyles();\n  const [chipData, setChipData] = useState<ChipData[]>([]);\n  const [selected, setSelected] = React.useState(\"\");\n  const [field, setField] = useState(\"\");\n\n  useEffect(() => {\n    add(chipData);\n  }, [chipData]);\n\n  const handleDelete = (chipToDelete: ChipData) => () => {\n    setChipData((chips) =>\n      chips.filter((chip) => chip.key !== chipToDelete.key)\n    );\n  };\n\n  const handleChangeSelect = (value: any) => {\n    setSelected(value as string);\n    setField(\"\");\n  };\n\n  const updateMask = (value: string): React.SetStateAction<string> => {\n    const resultItem = listSelect?.find((item) => item.text === selected);\n    if (resultItem !== undefined && resultItem.mask) {\n      return resultItem.mask(value);\n    }\n    return value;\n  };\n\n  return (\n    <Grid container xs={11} justify=\"space-around\" direction=\"column\">\n      <Paper component=\"form\" className={classes.root}>\n        <InputBase\n          onChange={(value) => setField(updateMask(value.target.value))}\n          placeholder={label}\n          value={field || \"\"}\n          inputProps={{ \"aria-label\": \"search google maps\" }}\n        />\n        <IconButton\n          onClick={() => {\n            if (!FormValidators.invalidField(field)) {\n              setChipData([...chipData, { text: field, key: uuidv4() }]);\n              add(chipData);\n              setField(\"\");\n            }\n          }}\n          aria-label=\"Adicionar\"\n        >\n          <AddIcon />\n        </IconButton>\n        <IconButton\n          onClick={() => {\n            setChipData([]);\n          }}\n          aria-label=\"Adicionar\"\n        >\n          <ResetIcon />\n        </IconButton>\n\n        {!!listSelect && (\n          <Select\n            labelId=\"demo-simple-select-error-label\"\n            id=\"demo-simple-select-error\"\n            value={selected}\n            onChange={(event) => handleChangeSelect(event?.target?.value)}\n            renderValue={(value) => `${value}`}\n          >\n            {listSelect?.map((value, i) => {\n              return (\n                <MenuItem key={i} value={value.text}>\n                  {value.text}\n                </MenuItem>\n              );\n            })}\n          </Select>\n        )}\n      </Paper>\n\n      {chipData.length ? (\n        <Paper component=\"ul\" className={classes.root}>\n          {chipData.map((data) => {\n            return (\n              <li key={data.key}>\n                <Chip\n                  label={data.text}\n                  onDelete={handleDelete(data)}\n                  className={classes.chip}\n                />\n              </li>\n            );\n          })}\n        </Paper>\n      ) : (\n        <></>\n      )}\n    </Grid>\n  );\n}\n","/home/munhoz/dev/react/gs3-tec-front/src/services/viaCepService.tsx",[],"/home/munhoz/dev/react/gs3-tec-front/src/validations/masks.tsx",[],"/home/munhoz/dev/react/gs3-tec-front/src/services/cadastroService.tsx",[],"/home/munhoz/dev/react/gs3-tec-front/src/store/storeAuth.tsx",[],{"ruleId":"62","severity":1,"message":"63","line":37,"column":6,"nodeType":"64","endLine":37,"endColumn":8,"suggestions":"65"},{"ruleId":"62","severity":1,"message":"66","line":55,"column":6,"nodeType":"64","endLine":55,"endColumn":16,"suggestions":"67"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["68"],"React Hook useEffect has a missing dependency: 'add'. Either include it or remove the dependency array. If 'add' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["69"],{"desc":"70","fix":"71"},{"desc":"72","fix":"73"},"Update the dependencies array to be: [history]",{"range":"74","text":"75"},"Update the dependencies array to be: [add, chipData]",{"range":"76","text":"77"},[1749,1751],"[history]",[1379,1389],"[add, chipData]"]